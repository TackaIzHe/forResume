 Задача: Программа для занесения данных о проекте в БД
 Реализовать приложение для занесения данных о проектах в базу данных и дальнейшей работы 
с этими данными. Это приложение должно иметь Backend и Frontend.
 Функциональные требования к Backend:
 — возможность создавать/просматривать/редактировать/удалять информацию о проектах;
 — возможность создавать/просматривать/редактировать/удалять информацию о работниках;
 — возможность добавлять и удалять сотрудников c проекта (один сотрудник может работать 
одновременно на нескольких проектах, и на одном проекте может работать несколько человек);
 — для просмотра проектов предусмотреть различные способы фильтрации (по диапазону даты 
начала, по приоритетам, и т. п.) и сортировки (по основным полям).
 Необходимая для хранения информация:
 — название проекта,
 — название компании-заказчика,
 — название компании-исполнителя,
 — данные о сотруднике (имя, фамилия, отчество, -mail человека),
 — данные о руководителе проекта (один из сотрудников),
 — даты начала и окончания проекта,
 — приоритет проекта (целочисленный).
 Функциональные требования к Frontend:
 — визард состоит из следующих шагов:
 1) заполнение названия проекта, дат начала и окончания проекта, приоритета проекта;
 2) заполнение компании-заказчика и компании-исполнителя;
 3) выбор руководителя проекта из списка всех сотрудников;
 4) выбор исполнителей для проекта из списка всех сотрудников;
 5) загрузка документов проекта.
 — на шагах выбора руководителя и исполнителя проектов использовать выпадающий список 
сотрудников с возможностью частичного ввода текста для последующего поиска сотрудников 
на сервере через AJAX-запрос;
 — на пятом шаге визарда реализовать HTML5 file uploader с возможностью drag & drop.
 Реализовать всё приложение можно либо через использование RazorEngine и стандартного 
MVC-подхода, либо через Web API и одним из JavaScript MVVM фреймворков (например, Knockout.js 
или Vue.js).
 Дополнительное задание 1:
 Добавить сущность «Задача», используя Entity Framework Code First DB Migrations.
 Функциональные требования:
 — возможность создавать/просматривать/редактировать/удалять информацию о задачах;
 — возможность добавлять и удалять задачи из проекта (один проект может содержать 
несколько задач);
— возможность добавлять и менять работников (исполнителей проекта) на задачи (у задачи 
может быть только один работник, у одного работника может быть много задач).
 — для просмотра задач предусмотреть различные способы фильтрации (например, по статусу) 
и сортировки (по основным полям).
 Необходимая для хранения информация:
 — название задачи,
 — автор задачи (связь с сущностью «Сотрудник»),
 — исполнитель задачи (связь с сущностью «Сотрудник»),
 — статус задачи (перечисление ToDo/InProgress/Done),
 — комментарий,
 — приоритет задачи (целочисленный).
 Дополнительное задание 2:
 Используя ASP.NET Identity 2.0, добавить в проект авторизацию и контроль прав доступа.
 Функциональные требования:
 — добавить три типа ролей: руководитель, менеджер проекта, сотрудник;
 — руководитель может видеть все страницы и управлять всеми сущностями;
 — менеджер проекта может: a) просматривать свои проекты и назначать/убирать сотрудников 
с проекта, б) управлять задачами на проекете, назначать исполнителя, менять статус. Менеджер 
проекта не может добавлять в систему новых сотрудников.
 — сотрудник может: а) просматривать свои проекты, б) просматривать свои задачи и менять 
их статус